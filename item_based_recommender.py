# -*- coding: utf-8 -*-
"""Item_Based_Recommender.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cv4bFAxDSnhSdkOJ9uBPx-VlO1INm4Rt
"""

import pandas as pd
# Movies
url = "https://drive.google.com/file/d/1Ehe4rSQgFqZTioDmWT3gb0bmlVGByLkb/view?usp=sharing"
path = "https://drive.google.com/uc?export=download&id="+url.split("/")[-2]
movies = pd.read_csv(path)

# links
url = "https://drive.google.com/file/d/1ZFWHUL0eVtyTnGzUTD65VO3r_5Llau7p/view?usp=sharing"
path = "https://drive.google.com/uc?export=download&id="+url.split("/")[-2]
links = pd.read_csv(path)

# tags
url = "https://drive.google.com/file/d/1wR2eVSyTNX80wvIqmYwWYE1v30woNNSj/view?usp=sharing"
path = "https://drive.google.com/uc?export=download&id="+url.split("/")[-2]
tags = pd.read_csv(path)

# ratings
url = "https://drive.google.com/file/d/1E9h8UowaRrSfYP9lkV1H2atm_gdL4Hq7/view?usp=drive_link"
path = "https://drive.google.com/uc?export=download&id="+url.split("/")[-2]
ratings = pd.read_csv(path)



movies.head()

ratings.head()

links.head()

tags.head()

# merge the two dataframes
movie_rating_df = movies.merge(ratings,how='inner',on='movieId')

movie_rating_df.head()

"""**User-Item Matrix**

In order to construct an item-based memory-based recommender system, the initial stage involves creating a user-item matrix. This matrix serves as a fundamental component for storing and examining the interactions between users and items, enabling us to uncover similarities and make predictions. The user-item matrix acts as a representation of the ratings or preferences expressed by users for each item within the system.
"""

user_movie_matrix = pd.pivot_table(data=movie_rating_df,
                                  values='rating',
                                  index='userId',
                                  columns='movieId',
                                  fill_value=0)
user_movie_matrix.head(10)

"""**Pearson correlation matrix**

The Pearson correlation coefficient (PCC) measures the linear relationship between two sets of data. It takes values between -1 and 1, where -1 indicates a perfect negative correlation, 1 represents a perfect positive correlation, and 0 signifies no correlation at all.

In pandas, the .corr() method is employed to calculate the pairwise correlation among columns in a DataFrame, excluding any NaN (missing) values. This method generates a correlation matrix.
"""

movie_correlations_matrix = user_movie_matrix.corr()
movie_correlations_matrix

"""Find Movies similar to the most Popular Movie from our Popularity Recommender - Shawshank Redemption

Create a DataFrame of how correlated other Movies are to Shawshank Redemption
"""

#movie_rating_df.loc[shawshank_title_mask & shawshank_genre_mask, "movieId"].values[0]

# Find the movieId for Shawshank Redemption
shawshank_title_mask = movie_rating_df["title"].str.contains('shawshank redemption', case=False)
shawshank_genre_mask = movie_rating_df["genres"].str.contains('Crime|Drama', case=False)
shawshank_movieId = movie_rating_df.loc[shawshank_title_mask & shawshank_genre_mask, "movieId"].values[0]

# Select the column, from the above matrix, matching the ISBN of Shawshank Redemption
shawshank_correlations_df = pd.DataFrame(movie_correlations_matrix[shawshank_movieId])
shawshank_correlations_df.head()

"""Make the column titles more explanatory"""

shawshank_correlations_df = shawshank_correlations_df.rename(columns={shawshank_movieId: 'shawshank_redemption_correlation'})
shawshank_correlations_df.head()

"""Remove the correlation of The Lovely Bones to itself"""

shawshank_correlations_df = shawshank_correlations_df[shawshank_correlations_df.index != shawshank_movieId]
shawshank_correlations_df.head()

"""Order the correlations descendingly and look at the top 10"""

shawshank_correlations_df = shawshank_correlations_df.sort_values(by='shawshank_redemption_correlation', ascending=False)
shawshank_correlations_df.head(10)

"""Let's have a deeper dig and see how many people rated both Shawshank Redemption and the movies being compared to see how many ratings influenced the correlation coefficient. We're doing this just to check that a good correlation didn't come from only 2 reviews. As if only two people have scored two movies 10/10, then it is easy for these books to have a very strong correlation, but this figure may be misleading - remember the law of large numbers?"""

no_of_users_rated_both_movies = [sum((user_movie_matrix[shawshank_movieId] > 0) & (user_movie_matrix[movieId] > 0)) for movieId in shawshank_correlations_df.index]

shawshank_correlations_df['users_who_rated_both_movies'] = no_of_users_rated_both_movies

shawshank_correlations_df.head(10)

"""Let's have a look at the distribution of users_who_rated_both_movies to see if there are any extremely low values"""

shawshank_correlations_df['users_who_rated_both_movies'].hist(bins=10);

"""Looks like there are a lot of movies that have been reviewed by people who also watched Shawshank Redemption less than 10 times. This could lead to misleading similarities as not enough people have rated both items. Therefore we'll remove any books where less than 10 people are users_who_rated_both_books. Ensuring customer satisfaction by not recommending unwelcome books."""

shawshank_correlations_df = shawshank_correlations_df[shawshank_correlations_df["users_who_rated_both_movies"] > 5]

shawshank_correlations_df

"""Let's add the movie titles and genres to see what our results are"""

movie_info_columns = ['movieId', 'title', 'genres']

shawshank_top_10_correlation = (shawshank_correlations_df
                                  .head(10)
                                  .reset_index()
                                  .merge(movie_rating_df.drop_duplicates(subset='movieId'),
                                         on='movieId',
                                         how='left')
                                  [movie_info_columns + ['shawshank_redemption_correlation',	'users_who_rated_both_movies']]
                                  )
shawshank_top_10_correlation

"""**Cosine similarity correlation matrix**


Cosine similarity determines the similarity between two vectors in a multi-dimensional space. It quantifies the cosine of the angle between the vectors, providing a value between -1 and 1.

Unlike the Pearson correlation coefficient, which measures the linear relationship between two sets of data, cosine similarity focuses on the direction rather than the magnitude of the vectors. A cosine similarity value of 1 indicates that the vectors are perfectly aligned, while a value of -1 suggests they are completely opposite in orientation. A value of 0 implies no similarity between the vectors.

In the context of data analysis using pandas, cosine similarity is not calculated directly through a specific method like the .corr() method for Pearson correlation. Instead, it is commonly computed using mathematical formulas or specific libraries, here we use our old friend SKLearn.
"""

from sklearn.metrics.pairwise import cosine_similarity

movies_cosines_matrix = pd.DataFrame(cosine_similarity(user_movie_matrix.T),
                                    columns=user_movie_matrix.columns,
                                    index=user_movie_matrix.columns)
movies_cosines_matrix

"""**Find Movies similar to the most popular Movie - Shawshank Redemption**

The pricess is the same as we did for correlation comparison above
"""

# Create a DataFrame using the values from 'movies_cosines_matrix' for the 'shawshank_movieId' book.
shawshank_cosines_df = pd.DataFrame(movies_cosines_matrix[shawshank_movieId])

shawshank_cosines_df.head()

# Rename the column 'shawshank_movieId' to 'shawshank_cosine'
shawshank_cosines_df = shawshank_cosines_df.rename(columns={shawshank_movieId: 'shawshank_cosine'})
shawshank_cosines_df

# Remove the row with the index 'shawshank_movieId'
shawshank_cosines_df = shawshank_cosines_df[shawshank_cosines_df.index != shawshank_movieId]

# Sort the 'shawshank_cosines_df' by the column 'shawshank_cosine' column in descending order.
shawshank_cosines_df = shawshank_cosines_df.sort_values(by="shawshank_cosine", ascending=False)
shawshank_cosines_df

# Find out the number of users who rated both Shawshank Redemption and other movies
no_of_users_rated_both_movies = [sum((user_movie_matrix[shawshank_movieId] > 0) & (user_movie_matrix[movieId] > 0)) for movieId in shawshank_cosines_df.index]

no_of_users_rated_both_movies

# Create a column for the number of users who rated Shawshank Redemption and other movies
shawshank_cosines_df['users_who_rated_both_movies'] = no_of_users_rated_both_movies

# Remove recommendations that have less than 10 users who rated both books.
shawshank_cosines_df = shawshank_cosines_df[shawshank_cosines_df["users_who_rated_both_movies"] > 10]

# Display the first 10 rows of the 'shawshank_cosines_df' DataFrame.
shawshank_cosines_df.head(10)

"""**Add the titles and genres to the top 10**"""

shawshank_top_10_cosine = (shawshank_cosines_df
                              .head(10)
                              .reset_index()
                              .merge(movie_rating_df.drop_duplicates(subset='movieId'),
                                     on='movieId',
                                     how='left')
                              [movie_info_columns + ['shawshank_cosine',	'users_who_rated_both_movies']]
                              )
shawshank_top_10_cosine

"""**Build A Function**

Make a function that takes in a movieId and an integer, n. The output should be the top n recommendations for the inputted movieId. Use the cosine similarity as your comparison rating.
"""

movieId = 345

# Create a DataFrame using the values from 'movies_cosines_matrix' for any movie.
movies_cosines_df = pd.DataFrame(movies_cosines_matrix[movieId])

movies_cosines_df

# Remove the row with the index of same 'movieId'
movies_cosines_df = movies_cosines_df[movies_cosines_df.index != movieId]

movies_cosines_df

# Sort the 'movies_cosines_df' by the column 'shawshank_cosine' column in descending order.
movies_cosines_df = movies_cosines_df.sort_values(by=movieId, ascending=False)
movies_cosines_df

# Find out the number of users who rated both movie and other movies
no_of_users_rated_both_movies = [sum((user_movie_matrix[movie] > 0) & (user_movie_matrix[movieId] > 0)) for movie in movies_cosines_df.index]

no_of_users_rated_both_movies

# Create a column for the number of users who rated Shawshank Redemption and other movies
movies_cosines_df['users_who_rated_both_movies'] = no_of_users_rated_both_movies

# Remove recommendations that have less than 10 users who rated both books.
movies_cosines_df = movies_cosines_df[movies_cosines_df["users_who_rated_both_movies"] > 10]

movies_cosines_df

n = 10

top_n_movies_cosine = (movies_cosines_df
                              .head(n)
                              .reset_index()
                              .merge(movie_rating_df.drop_duplicates(subset='movieId'),
                                     on='movieId',
                                     how='left')
                              [movie_info_columns + ['movieId',	'users_who_rated_both_movies']]
                              )
top_n_movies_cosine





def top_n_recommended(movieId, n=10):
  movies_cosines_df = pd.DataFrame(movies_cosines_matrix[movieId])
  movies_cosines_df = movies_cosines_df[movies_cosines_df.index != movieId]
  movies_cosines_df = movies_cosines_df.sort_values(by=movieId, ascending=False)
  no_of_users_rated_both_movies = [sum((user_movie_matrix[movie] > 0) & (user_movie_matrix[movieId] > 0)) for movie in movies_cosines_df.index]
  movies_cosines_df['users_who_rated_both_movies'] = no_of_users_rated_both_movies
  movies_cosines_df = movies_cosines_df[movies_cosines_df["users_who_rated_both_movies"] > 10]

  top_n_movies_cosine = (movies_cosines_df
                              .head(n)
                              .reset_index()
                              .merge(movie_rating_df.drop_duplicates(subset='movieId'),
                                     on='movieId',
                                     how='left')
                              [movie_info_columns + ['movieId',	'users_who_rated_both_movies']]
                              )


  return top_n_movies_cosine [['movieId','title', 'genres']]

top_n_recommended(236, 10)